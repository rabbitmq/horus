{
  "lockFileVersion": 11,
  "registryFileHashes": {
    "https://bcr.bazel.build/bazel_registry.json": "8a28e4aff06ee60aed2a8c281907fb8bcbf3b753c91fb5a5c57da3215d5b3497",
    "https://bcr.bazel.build/modules/abseil-cpp/20210324.2/MODULE.bazel": "7cd0312e064fde87c8d1cd79ba06c876bd23630c83466e9500321be55c96ace2",
    "https://bcr.bazel.build/modules/abseil-cpp/20211102.0/MODULE.bazel": "70390338f7a5106231d20620712f7cccb659cd0e9d073d1991c038eb9fc57589",
    "https://bcr.bazel.build/modules/abseil-cpp/20211102.0/source.json": "7e3a9adf473e9af076ae485ed649d5641ad50ec5c11718103f34de03170d94ad",
    "https://bcr.bazel.build/modules/apple_support/1.5.0/MODULE.bazel": "50341a62efbc483e8a2a6aec30994a58749bd7b885e18dd96aa8c33031e558ef",
    "https://bcr.bazel.build/modules/apple_support/1.5.0/source.json": "eb98a7627c0bc486b57f598ad8da50f6625d974c8f723e9ea71bd39f709c9862",
    "https://bcr.bazel.build/modules/bazel_features/1.11.0/MODULE.bazel": "f9382337dd5a474c3b7d334c2f83e50b6eaedc284253334cf823044a26de03e8",
    "https://bcr.bazel.build/modules/bazel_features/1.11.0/source.json": "c9320aa53cd1c441d24bd6b716da087ad7e4ff0d9742a9884587596edfe53015",
    "https://bcr.bazel.build/modules/bazel_skylib/1.0.3/MODULE.bazel": "bcb0fd896384802d1ad283b4e4eb4d718eebd8cb820b0a2c3a347fb971afd9d8",
    "https://bcr.bazel.build/modules/bazel_skylib/1.2.0/MODULE.bazel": "44fe84260e454ed94ad326352a698422dbe372b21a1ac9f3eab76eb531223686",
    "https://bcr.bazel.build/modules/bazel_skylib/1.2.1/MODULE.bazel": "f35baf9da0efe45fa3da1696ae906eea3d615ad41e2e3def4aeb4e8bc0ef9a7a",
    "https://bcr.bazel.build/modules/bazel_skylib/1.3.0/MODULE.bazel": "20228b92868bf5cfc41bda7afc8a8ba2a543201851de39d990ec957b513579c5",
    "https://bcr.bazel.build/modules/bazel_skylib/1.6.1/MODULE.bazel": "8fdee2dbaace6c252131c00e1de4b165dc65af02ea278476187765e1a617b917",
    "https://bcr.bazel.build/modules/bazel_skylib/1.7.1/MODULE.bazel": "3120d80c5861aa616222ec015332e5f8d3171e062e3e804a2a0253e1be26e59b",
    "https://bcr.bazel.build/modules/bazel_skylib/1.7.1/source.json": "f121b43eeefc7c29efbd51b83d08631e2347297c95aac9764a701f2a6a2bb953",
    "https://bcr.bazel.build/modules/buildozer/7.1.2/MODULE.bazel": "2e8dd40ede9c454042645fd8d8d0cd1527966aa5c919de86661e62953cd73d84",
    "https://bcr.bazel.build/modules/buildozer/7.1.2/source.json": "c9028a501d2db85793a6996205c8de120944f50a0d570438fcae0457a5f9d1f8",
    "https://bcr.bazel.build/modules/gazelle/0.32.0/MODULE.bazel": "b499f58a5d0d3537f3cf5b76d8ada18242f64ec474d8391247438bf04f58c7b8",
    "https://bcr.bazel.build/modules/gazelle/0.33.0/MODULE.bazel": "a13a0f279b462b784fb8dd52a4074526c4a2afe70e114c7d09066097a46b3350",
    "https://bcr.bazel.build/modules/gazelle/0.33.0/source.json": "ddd6c264f75051b9dded4a256b96351f8464c73abc657c364bc0a0b7f5e32d9e",
    "https://bcr.bazel.build/modules/googletest/1.11.0/MODULE.bazel": "3a83f095183f66345ca86aa13c58b59f9f94a2f81999c093d4eeaa2d262d12f4",
    "https://bcr.bazel.build/modules/googletest/1.11.0/source.json": "c73d9ef4268c91bd0c1cd88f1f9dfa08e814b1dbe89b5f594a9f08ba0244d206",
    "https://bcr.bazel.build/modules/platforms/0.0.4/MODULE.bazel": "9b328e31ee156f53f3c416a64f8491f7eb731742655a47c9eec4703a71644aee",
    "https://bcr.bazel.build/modules/platforms/0.0.5/MODULE.bazel": "5733b54ea419d5eaf7997054bb55f6a1d0b5ff8aedf0176fef9eea44f3acda37",
    "https://bcr.bazel.build/modules/platforms/0.0.6/MODULE.bazel": "ad6eeef431dc52aefd2d77ed20a4b353f8ebf0f4ecdd26a807d2da5aa8cd0615",
    "https://bcr.bazel.build/modules/platforms/0.0.7/MODULE.bazel": "72fd4a0ede9ee5c021f6a8dd92b503e089f46c227ba2813ff183b71616034814",
    "https://bcr.bazel.build/modules/platforms/0.0.9/MODULE.bazel": "4a87a60c927b56ddd67db50c89acaa62f4ce2a1d2149ccb63ffd871d5ce29ebc",
    "https://bcr.bazel.build/modules/platforms/0.0.9/source.json": "cd74d854bf16a9e002fb2ca7b1a421f4403cda29f824a765acd3a8c56f8d43e6",
    "https://bcr.bazel.build/modules/protobuf/21.7/MODULE.bazel": "a5a29bb89544f9b97edce05642fac225a808b5b7be74038ea3640fae2f8e66a7",
    "https://bcr.bazel.build/modules/protobuf/21.7/source.json": "bbe500720421e582ff2d18b0802464205138c06056f443184de39fbb8187b09b",
    "https://bcr.bazel.build/modules/protobuf/3.19.0/MODULE.bazel": "6b5fbb433f760a99a22b18b6850ed5784ef0e9928a72668b66e4d7ccd47db9b0",
    "https://bcr.bazel.build/modules/protobuf/3.19.2/MODULE.bazel": "532ffe5f2186b69fdde039efe6df13ba726ff338c6bc82275ad433013fa10573",
    "https://bcr.bazel.build/modules/protobuf/3.19.6/MODULE.bazel": "9233edc5e1f2ee276a60de3eaa47ac4132302ef9643238f23128fea53ea12858",
    "https://bcr.bazel.build/modules/rules_cc/0.0.1/MODULE.bazel": "cb2aa0747f84c6c3a78dad4e2049c154f08ab9d166b1273835a8174940365647",
    "https://bcr.bazel.build/modules/rules_cc/0.0.2/MODULE.bazel": "6915987c90970493ab97393024c156ea8fb9f3bea953b2f3ec05c34f19b5695c",
    "https://bcr.bazel.build/modules/rules_cc/0.0.8/MODULE.bazel": "964c85c82cfeb6f3855e6a07054fdb159aced38e99a5eecf7bce9d53990afa3e",
    "https://bcr.bazel.build/modules/rules_cc/0.0.9/MODULE.bazel": "836e76439f354b89afe6a911a7adf59a6b2518fafb174483ad78a2a2fde7b1c5",
    "https://bcr.bazel.build/modules/rules_cc/0.0.9/source.json": "1f1ba6fea244b616de4a554a0f4983c91a9301640c8fe0dd1d410254115c8430",
    "https://bcr.bazel.build/modules/rules_erlang/3.16.0/MODULE.bazel": "dcf0ecc074384441f804dd53eb027ffc5596e4f09fdb50f428db8ebd290e9e83",
    "https://bcr.bazel.build/modules/rules_erlang/3.16.0/source.json": "7e45c3a7394bbe83e2e1fa3cc9078dc4069ac4be7ff07c95eb28d7ffba4cbe34",
    "https://bcr.bazel.build/modules/rules_go/0.41.0/MODULE.bazel": "55861d8e8bb0e62cbd2896f60ff303f62ffcb0eddb74ecb0e5c0cbe36fc292c8",
    "https://bcr.bazel.build/modules/rules_go/0.41.0/source.json": "a46e5f523176e3bd60b1c9cfdcb6c878b9cd14c21fe1a563c4ba0e6d0e7c4dd8",
    "https://bcr.bazel.build/modules/rules_java/4.0.0/MODULE.bazel": "5a78a7ae82cd1a33cef56dc578c7d2a46ed0dca12643ee45edbb8417899e6f74",
    "https://bcr.bazel.build/modules/rules_java/7.6.5/MODULE.bazel": "481164be5e02e4cab6e77a36927683263be56b7e36fef918b458d7a8a1ebadb1",
    "https://bcr.bazel.build/modules/rules_java/7.6.5/source.json": "a805b889531d1690e3c72a7a7e47a870d00323186a9904b36af83aa3d053ee8d",
    "https://bcr.bazel.build/modules/rules_jvm_external/4.4.2/MODULE.bazel": "a56b85e418c83eb1839819f0b515c431010160383306d13ec21959ac412d2fe7",
    "https://bcr.bazel.build/modules/rules_jvm_external/4.4.2/source.json": "a075731e1b46bc8425098512d038d416e966ab19684a10a34f4741295642fc35",
    "https://bcr.bazel.build/modules/rules_license/0.0.3/MODULE.bazel": "627e9ab0247f7d1e05736b59dbb1b6871373de5ad31c3011880b4133cafd4bd0",
    "https://bcr.bazel.build/modules/rules_license/0.0.7/MODULE.bazel": "088fbeb0b6a419005b89cf93fe62d9517c0a2b8bb56af3244af65ecfe37e7d5d",
    "https://bcr.bazel.build/modules/rules_license/0.0.7/source.json": "355cc5737a0f294e560d52b1b7a6492d4fff2caf0bef1a315df5a298fca2d34a",
    "https://bcr.bazel.build/modules/rules_pkg/0.7.0/MODULE.bazel": "df99f03fc7934a4737122518bb87e667e62d780b610910f0447665a7e2be62dc",
    "https://bcr.bazel.build/modules/rules_pkg/0.7.0/source.json": "c2557066e0c0342223ba592510ad3d812d4963b9024831f7f66fd0584dd8c66c",
    "https://bcr.bazel.build/modules/rules_proto/4.0.0/MODULE.bazel": "a7a7b6ce9bee418c1a760b3d84f83a299ad6952f9903c67f19e4edd964894e06",
    "https://bcr.bazel.build/modules/rules_proto/5.3.0-21.7/MODULE.bazel": "e8dff86b0971688790ae75528fe1813f71809b5afd57facb44dad9e8eca631b7",
    "https://bcr.bazel.build/modules/rules_proto/5.3.0-21.7/source.json": "d57902c052424dfda0e71646cb12668d39c4620ee0544294d9d941e7d12bc3a9",
    "https://bcr.bazel.build/modules/rules_python/0.10.2/MODULE.bazel": "cc82bc96f2997baa545ab3ce73f196d040ffb8756fd2d66125a530031cd90e5f",
    "https://bcr.bazel.build/modules/rules_python/0.22.1/MODULE.bazel": "26114f0c0b5e93018c0c066d6673f1a2c3737c7e90af95eff30cfee38d0bbac7",
    "https://bcr.bazel.build/modules/rules_python/0.22.1/source.json": "57226905e783bae7c37c2dd662be078728e48fa28ee4324a7eabcafb5a43d014",
    "https://bcr.bazel.build/modules/rules_python/0.4.0/MODULE.bazel": "9208ee05fd48bf09ac60ed269791cf17fb343db56c8226a720fbb1cdf467166c",
    "https://bcr.bazel.build/modules/stardoc/0.5.1/MODULE.bazel": "1a05d92974d0c122f5ccf09291442580317cdd859f07a8655f1db9a60374f9f8",
    "https://bcr.bazel.build/modules/stardoc/0.5.1/source.json": "a96f95e02123320aa015b956f29c00cb818fa891ef823d55148e1a362caacf29",
    "https://bcr.bazel.build/modules/upb/0.0.0-20220923-a547704/MODULE.bazel": "7298990c00040a0e2f121f6c32544bab27d4452f80d9ce51349b1a28f3005c43",
    "https://bcr.bazel.build/modules/upb/0.0.0-20220923-a547704/source.json": "f1ef7d3f9e0e26d4b23d1c39b5f5de71f584dd7d1b4ef83d9bbba6ec7a6a6459",
    "https://bcr.bazel.build/modules/zlib/1.2.11/MODULE.bazel": "07b389abc85fdbca459b69e2ec656ae5622873af3f845e1c9d80fe179f3effa0",
    "https://bcr.bazel.build/modules/zlib/1.2.12/MODULE.bazel": "3b1a8834ada2a883674be8cbd36ede1b6ec481477ada359cd2d3ddc562340b27",
    "https://bcr.bazel.build/modules/zlib/1.3.1.bcr.3/MODULE.bazel": "af322bc08976524477c79d1e45e241b6efbeb918c497e8840b8ab116802dda79",
    "https://bcr.bazel.build/modules/zlib/1.3.1.bcr.3/source.json": "2be409ac3c7601245958cd4fcdff4288be79ed23bd690b4b951f500d54ee6e7d"
  },
  "selectedYankedVersions": {},
  "moduleExtensions": {
    "@@apple_support~//crosstool:setup.bzl%apple_cc_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "PjIds3feoYE8SGbbIq2SFTZy3zmxeO2tQevJZNDo7iY=",
        "usagesDigest": "+hz7IHWN6A1oVJJWNDB6yZRG+RYhF76wAYItpAeIUIg=",
        "recordedFileInputs": {},
        "recordedDirentsInputs": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_apple_cc_toolchains": {
            "bzlFile": "@@apple_support~//crosstool:setup.bzl",
            "ruleClassName": "_apple_cc_autoconf_toolchains",
            "attributes": {}
          },
          "local_config_apple_cc": {
            "bzlFile": "@@apple_support~//crosstool:setup.bzl",
            "ruleClassName": "_apple_cc_autoconf",
            "attributes": {}
          }
        },
        "recordedRepoMappingEntries": [
          [
            "apple_support~",
            "bazel_tools",
            "bazel_tools"
          ]
        ]
      }
    },
    "@@gazelle~//internal/bzlmod:non_module_deps.bzl%non_module_deps": {
      "general": {
        "bzlTransitiveDigest": "idtJXxcHUd75fcvggtK/s6naCFjcaysxF0U5OKBm2LE=",
        "usagesDigest": "MSRC6XQC2hTPso00Q6U8X4K/6hZrN5jRz5oC+ZunIss=",
        "recordedFileInputs": {},
        "recordedDirentsInputs": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "bazel_gazelle_go_repository_cache": {
            "bzlFile": "@@gazelle~//internal:go_repository_cache.bzl",
            "ruleClassName": "go_repository_cache",
            "attributes": {
              "go_sdk_name": "@rules_go~~go_sdk~go_default_sdk",
              "go_env": {}
            }
          },
          "bazel_gazelle_go_repository_tools": {
            "bzlFile": "@@gazelle~//internal:go_repository_tools.bzl",
            "ruleClassName": "go_repository_tools",
            "attributes": {
              "go_cache": "@@gazelle~~non_module_deps~bazel_gazelle_go_repository_cache//:go.env"
            }
          },
          "bazel_gazelle_is_bazel_module": {
            "bzlFile": "@@gazelle~//internal:is_bazel_module.bzl",
            "ruleClassName": "is_bazel_module",
            "attributes": {
              "is_bazel_module": true
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "gazelle~",
            "bazel_gazelle_go_repository_cache",
            "gazelle~~non_module_deps~bazel_gazelle_go_repository_cache"
          ],
          [
            "gazelle~",
            "go_host_compatible_sdk_label",
            "rules_go~~go_sdk~go_host_compatible_sdk_label"
          ],
          [
            "rules_go~~go_sdk~go_host_compatible_sdk_label",
            "go_default_sdk",
            "rules_go~~go_sdk~go_default_sdk"
          ]
        ]
      }
    },
    "@@platforms//host:extension.bzl%host_platform": {
      "general": {
        "bzlTransitiveDigest": "xelQcPZH8+tmuOHVjL9vDxMnnQNMlwj0SlvgoqBkm4U=",
        "usagesDigest": "pCYpDQmqMbmiiPI1p2Kd3VLm5T48rRAht5WdW0X2GlA=",
        "recordedFileInputs": {},
        "recordedDirentsInputs": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "host_platform": {
            "bzlFile": "@@platforms//host:extension.bzl",
            "ruleClassName": "host_platform_repo",
            "attributes": {}
          }
        },
        "recordedRepoMappingEntries": []
      }
    },
    "@@rules_erlang~//bzlmod:extensions.bzl%erlang_config": {
      "general": {
        "bzlTransitiveDigest": "ELWkh3HLOUKGWr8MbazyYoVV4TEANxcJKQLQ/SL142I=",
        "usagesDigest": "WKhyESxK+M/SBbzwEEq+702KL6BpsWEbqbyNuuN6UTk=",
        "recordedFileInputs": {},
        "recordedDirentsInputs": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "erlang_config": {
            "bzlFile": "@@rules_erlang~//repositories:erlang_config.bzl",
            "ruleClassName": "erlang_config",
            "attributes": {
              "rules_erlang_workspace": "@rules_erlang",
              "types": {
                "24": "internal",
                "25": "internal",
                "26": "internal"
              },
              "versions": {
                "24": "24.3.4.6",
                "25": "25.1.1",
                "26": "26.0"
              },
              "urls": {
                "24": "https://github.com/erlang/otp/releases/download/OTP-24.3.4.6/otp_src_24.3.4.6.tar.gz",
                "25": "https://github.com/erlang/otp/releases/download/OTP-25.1.1/otp_src_25.1.1.tar.gz",
                "26": "https://github.com/erlang/otp/releases/download/OTP-26.0/otp_src_26.0.tar.gz"
              },
              "strip_prefixs": {
                "24": "otp_src_24.3.4.6",
                "25": "otp_src_25.1.1",
                "26": "otp_src_26.0"
              },
              "sha256s": {
                "24": "8444ff9abe23aea268adbb95463561fc222c965052d35d7c950b17be01c3ad82",
                "25": "42840c32e13a27bdb2c376d69aa22466513d441bfe5eb882de23baf8218308d3",
                "26": "3ff3c53d7ef9a45b5720e95b8756269c1a1b58eb51accc992ca97522fdb234d4"
              },
              "erlang_homes": {},
              "pre_configure_cmdss": {
                "24": [],
                "25": [],
                "26": []
              },
              "extra_configure_optss": {
                "24": [],
                "25": [],
                "26": []
              },
              "post_configure_cmdss": {
                "24": [],
                "25": [],
                "26": []
              },
              "extra_make_optss": {
                "24": [],
                "25": [],
                "26": []
              }
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "rules_erlang~",
            "bazel_skylib",
            "bazel_skylib~"
          ],
          [
            "rules_erlang~",
            "bazel_tools",
            "bazel_tools"
          ]
        ]
      }
    },
    "@@rules_erlang~//bzlmod:extensions.bzl%erlang_package": {
      "general": {
        "bzlTransitiveDigest": "ELWkh3HLOUKGWr8MbazyYoVV4TEANxcJKQLQ/SL142I=",
        "usagesDigest": "3Xgp690JWF6nIWdiLbffkqVu5y1OBlly1L8Ygjl9iHg=",
        "recordedFileInputs": {},
        "recordedDirentsInputs": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "getopt_src": {
            "bzlFile": "@@rules_erlang~//:hex_archive.bzl",
            "ruleClassName": "hex_archive",
            "attributes": {
              "package_name": "getopt",
              "version": "1.0.1",
              "sha256": "53e1ab83b9ceb65c9672d3e7a35b8092e9bdc9b3ee80721471a161c10c59959c",
              "build_file_content": "filegroup(\n    name = \"app_src\",\n    srcs = glob([\"src/*.app.src\"]),\n    visibility = [\"//visibility:public\"],\n)\nfilegroup(\n    name = \"srcs\",\n    srcs = glob([\"src/**/*.erl\"]),\n    visibility = [\"//visibility:public\"],\n)\n"
            }
          },
          "xref_runner_src": {
            "bzlFile": "@@rules_erlang~//:hex_archive.bzl",
            "ruleClassName": "hex_archive",
            "attributes": {
              "package_name": "xref_runner",
              "version": "1.2.0",
              "sha256": "22d4bb466b1bf8b206f03d1f43f01233b547f8b81351f29af2c6d668e0734ffc",
              "build_file_content": "filegroup(\n    name = \"app_src\",\n    srcs = glob([\"src/*.app.src\"]),\n    visibility = [\"//visibility:public\"],\n)\nfilegroup(\n    name = \"srcs\",\n    srcs = glob([\"src/**/*.erl\"]),\n    visibility = [\"//visibility:public\"],\n)\n"
            }
          },
          "gen_batch_server": {
            "bzlFile": "@@rules_erlang~//:hex_archive.bzl",
            "ruleClassName": "hex_archive",
            "attributes": {
              "package_name": "gen_batch_server",
              "version": "0.8.9",
              "sha256": "c8581fe4a4b6bccf91e53ce6a8c7e6c27c8c591bab5408b160166463f5579c22",
              "patches": [],
              "patch_args": [
                "-p0"
              ],
              "patch_cmds": [
                "set -euo pipefail\n\necho \"Generating BUILD.bazel for gen_batch_server...\"\n\n# if there is a Makefile and erlang.mk, use make to infer\n# the version and deps, error on name mismatch, and error\n# if the deps mismatch\nif [ ! -f BUILD.bazel ]; then\n    if [ -f Makefile ]; then\n        if [ -f erlang.mk ]; then\n            if [ -n \"${MAKE:=make}\" ]; then\n                echo \"\tAttempting auto-configure from erlang.mk files...\"\n\n                cat << 'MK' > bazel-autobuild.mk\ncomma:= ,\nproject:= $(lastword $(subst ., ,$(PROJECT)))\nifnappsrc:= $(if $(wildcard src/$(project).app.src),,$1)\n\ndefine BUILD_FILE_CONTENT\nload(\"@rules_erlang//:erlang_app.bzl\", \"erlang_app\")\n\nerlang_app(\n    app_name = \"$(project)\",\n    $(call ifnappsrc,$(if $(PROJECT_DESCRIPTION),app_description = \"\"\"$(PROJECT_DESCRIPTION)\"\"\"$(comma)))\n    $(call ifnappsrc,app_version = \"$(PROJECT_VERSION)\"$(comma))\n    $(call ifnappsrc,app_env = \"\"\"$(PROJECT_ENV)\"\"\"$(comma))\n    $(call ifnappsrc,$(if $(PROJECT_APP_EXTRA_KEYS),app_extra = \"\"\"$(PROJECT_APP_EXTRA_KEYS)\"\"\"$(comma)))\n    $(if $(LOCAL_DEPS),extra_apps = [$(foreach dep,$(LOCAL_DEPS),\n        \"$(dep)\",)\n    ]$(comma))\n    $(if $(BUILD_DEPS),build_deps = [$(foreach dep,$(BUILD_DEPS),\n        \"@$(dep)//:erlang_app\",)\n    ]$(comma))\n    $(if $(DEPS),deps = [$(foreach dep,$(DEPS),\n        \"@$(dep)//:erlang_app\",)\n    ]$(comma))\n    erlc_opts = select({\n        \"@rules_erlang//:debug_build\": [\"+debug_info\"],\n        \"//conditions:default\": [\"+deterministic\", \"+debug_info\"],\n    }),\n    stamp = 0,\n    testonly = False,\n)\nendef\n\nexport BUILD_FILE_CONTENT\n\nBUILD.bazel:\n\techo \"$$BUILD_FILE_CONTENT\" >> $@\nMK\n                cat bazel-autobuild.mk\n                ${MAKE} -f Makefile -f bazel-autobuild.mk BUILD.bazel\n            else\n                echo \"Skipping erlang.mk import as make is unavailable\"\n            fi\n        fi\n    fi\nfi\n\n# fallback to BUILD file with just the name, version & deps\nif [ ! -f BUILD.bazel ]; then\n    if [ -n \"0.8.9\" ]; then\n        if [ -n \"\" ]; then\n            cat << EOF > BUILD.bazel\nload(\"@rules_erlang//:erlang_app.bzl\", \"erlang_app\")\n\nerlang_app(\n    app_name = \"gen_batch_server\",\n    app_version = \"0.8.9\",\n    erlc_opts = select({\n        \"@rules_erlang//:debug_build\": [\"+debug_info\"],\n        \"//conditions:default\": [\"+deterministic\", \"+debug_info\"],\n    }),\n    deps = ,\n    stamp = 0,\n    testonly = False,\n)\nEOF\n        fi\n    fi\nfi\n\n# fallback to BUILD file with just the name and version\nif [ ! -f BUILD.bazel ]; then\n    if [ -n \"0.8.9\" ]; then\n        cat << EOF > BUILD.bazel\nload(\"@rules_erlang//:erlang_app.bzl\", \"erlang_app\")\n\nerlang_app(\n    app_name = \"gen_batch_server\",\n    app_version = \"0.8.9\",\n    erlc_opts = select({\n        \"@rules_erlang//:debug_build\": [\"+debug_info\"],\n        \"//conditions:default\": [\"+deterministic\", \"+debug_info\"],\n    }),\n    stamp = 0,\n    testonly = False,\n)\nEOF\n    fi\nfi\n\n# fallback to BUILD file with just the name\nif [ ! -f BUILD.bazel ]; then\n    cat << EOF > BUILD.bazel\nload(\"@rules_erlang//:erlang_app.bzl\", \"erlang_app\")\n\nerlang_app(\n    app_name = \"gen_batch_server\",\n    erlc_opts = select({\n        \"@rules_erlang//:debug_build\": [\"+debug_info\"],\n        \"//conditions:default\": [\"+deterministic\", \"+debug_info\"],\n    }),\n    stamp = 0,\n    testonly = False,\n)\nEOF\nfi\n"
              ]
            }
          },
          "eunit_formatters": {
            "bzlFile": "@@rules_erlang~//:hex_archive.bzl",
            "ruleClassName": "hex_archive",
            "attributes": {
              "package_name": "eunit_formatters",
              "version": "0.5.0",
              "sha256": "",
              "build_file": "@@//bzl:BUILD.eunit_formatters",
              "patches": [],
              "patch_args": [
                "-p0"
              ],
              "patch_cmds": []
            }
          },
          "inet_tcp_proxy_dist": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:git.bzl",
            "ruleClassName": "git_repository",
            "attributes": {
              "remote": "https://github.com/rabbitmq/inet_tcp_proxy.git",
              "branch": "master",
              "tag": "",
              "commit": "",
              "patch_cmds": [
                "set -euo pipefail\n\necho \"Generating BUILD.bazel for inet_tcp_proxy_dist...\"\n\n# if there is a Makefile and erlang.mk, use make to infer\n# the version and deps, error on name mismatch, and error\n# if the deps mismatch\nif [ ! -f BUILD.bazel ]; then\n    if [ -f Makefile ]; then\n        if [ -f erlang.mk ]; then\n            if [ -n \"${MAKE:=make}\" ]; then\n                echo \"\tAttempting auto-configure from erlang.mk files...\"\n\n                cat << 'MK' > bazel-autobuild.mk\ncomma:= ,\nproject:= $(lastword $(subst ., ,$(PROJECT)))\nifnappsrc:= $(if $(wildcard src/$(project).app.src),,$1)\n\ndefine BUILD_FILE_CONTENT\nload(\"@rules_erlang//:erlang_app.bzl\", \"erlang_app\")\n\nerlang_app(\n    app_name = \"$(project)\",\n    $(call ifnappsrc,$(if $(PROJECT_DESCRIPTION),app_description = \"\"\"$(PROJECT_DESCRIPTION)\"\"\"$(comma)))\n    $(call ifnappsrc,app_version = \"$(PROJECT_VERSION)\"$(comma))\n    $(call ifnappsrc,app_env = \"\"\"$(PROJECT_ENV)\"\"\"$(comma))\n    $(call ifnappsrc,$(if $(PROJECT_APP_EXTRA_KEYS),app_extra = \"\"\"$(PROJECT_APP_EXTRA_KEYS)\"\"\"$(comma)))\n    $(if $(LOCAL_DEPS),extra_apps = [$(foreach dep,$(LOCAL_DEPS),\n        \"$(dep)\",)\n    ]$(comma))\n    $(if $(BUILD_DEPS),build_deps = [$(foreach dep,$(BUILD_DEPS),\n        \"@$(dep)//:erlang_app\",)\n    ]$(comma))\n    $(if $(DEPS),deps = [$(foreach dep,$(DEPS),\n        \"@$(dep)//:erlang_app\",)\n    ]$(comma))\n    erlc_opts = select({\n        \"@rules_erlang//:debug_build\": [\"+debug_info\"],\n        \"//conditions:default\": [\"+deterministic\", \"+debug_info\"],\n    }),\n    stamp = 0,\n    testonly = False,\n)\nendef\n\nexport BUILD_FILE_CONTENT\n\nBUILD.bazel:\n\techo \"$$BUILD_FILE_CONTENT\" >> $@\nMK\n                cat bazel-autobuild.mk\n                ${MAKE} -f Makefile -f bazel-autobuild.mk BUILD.bazel\n            else\n                echo \"Skipping erlang.mk import as make is unavailable\"\n            fi\n        fi\n    fi\nfi\n\n# fallback to BUILD file with just the name, version & deps\nif [ ! -f BUILD.bazel ]; then\n    if [ -n \"\" ]; then\n        if [ -n \"[]\" ]; then\n            cat << EOF > BUILD.bazel\nload(\"@rules_erlang//:erlang_app.bzl\", \"erlang_app\")\n\nerlang_app(\n    app_name = \"inet_tcp_proxy_dist\",\n    app_version = \"\",\n    erlc_opts = select({\n        \"@rules_erlang//:debug_build\": [\"+debug_info\"],\n        \"//conditions:default\": [\"+deterministic\", \"+debug_info\"],\n    }),\n    deps = [],\n    stamp = 0,\n    testonly = False,\n)\nEOF\n        fi\n    fi\nfi\n\n# fallback to BUILD file with just the name and version\nif [ ! -f BUILD.bazel ]; then\n    if [ -n \"\" ]; then\n        cat << EOF > BUILD.bazel\nload(\"@rules_erlang//:erlang_app.bzl\", \"erlang_app\")\n\nerlang_app(\n    app_name = \"inet_tcp_proxy_dist\",\n    app_version = \"\",\n    erlc_opts = select({\n        \"@rules_erlang//:debug_build\": [\"+debug_info\"],\n        \"//conditions:default\": [\"+deterministic\", \"+debug_info\"],\n    }),\n    stamp = 0,\n    testonly = False,\n)\nEOF\n    fi\nfi\n\n# fallback to BUILD file with just the name\nif [ ! -f BUILD.bazel ]; then\n    cat << EOF > BUILD.bazel\nload(\"@rules_erlang//:erlang_app.bzl\", \"erlang_app\")\n\nerlang_app(\n    app_name = \"inet_tcp_proxy_dist\",\n    erlc_opts = select({\n        \"@rules_erlang//:debug_build\": [\"+debug_info\"],\n        \"//conditions:default\": [\"+deterministic\", \"+debug_info\"],\n    }),\n    stamp = 0,\n    testonly = False,\n)\nEOF\nfi\n"
              ]
            }
          },
          "meck": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:git.bzl",
            "ruleClassName": "git_repository",
            "attributes": {
              "remote": "https://github.com/eproxus/meck.git",
              "branch": "master",
              "tag": "",
              "commit": "",
              "patch_cmds": [
                "set -euo pipefail\n\necho \"Generating BUILD.bazel for meck...\"\n\n# if there is a Makefile and erlang.mk, use make to infer\n# the version and deps, error on name mismatch, and error\n# if the deps mismatch\nif [ ! -f BUILD.bazel ]; then\n    if [ -f Makefile ]; then\n        if [ -f erlang.mk ]; then\n            if [ -n \"${MAKE:=make}\" ]; then\n                echo \"\tAttempting auto-configure from erlang.mk files...\"\n\n                cat << 'MK' > bazel-autobuild.mk\ncomma:= ,\nproject:= $(lastword $(subst ., ,$(PROJECT)))\nifnappsrc:= $(if $(wildcard src/$(project).app.src),,$1)\n\ndefine BUILD_FILE_CONTENT\nload(\"@rules_erlang//:erlang_app.bzl\", \"erlang_app\")\n\nerlang_app(\n    app_name = \"$(project)\",\n    $(call ifnappsrc,$(if $(PROJECT_DESCRIPTION),app_description = \"\"\"$(PROJECT_DESCRIPTION)\"\"\"$(comma)))\n    $(call ifnappsrc,app_version = \"$(PROJECT_VERSION)\"$(comma))\n    $(call ifnappsrc,app_env = \"\"\"$(PROJECT_ENV)\"\"\"$(comma))\n    $(call ifnappsrc,$(if $(PROJECT_APP_EXTRA_KEYS),app_extra = \"\"\"$(PROJECT_APP_EXTRA_KEYS)\"\"\"$(comma)))\n    $(if $(LOCAL_DEPS),extra_apps = [$(foreach dep,$(LOCAL_DEPS),\n        \"$(dep)\",)\n    ]$(comma))\n    $(if $(BUILD_DEPS),build_deps = [$(foreach dep,$(BUILD_DEPS),\n        \"@$(dep)//:erlang_app\",)\n    ]$(comma))\n    $(if $(DEPS),deps = [$(foreach dep,$(DEPS),\n        \"@$(dep)//:erlang_app\",)\n    ]$(comma))\n    erlc_opts = select({\n        \"@rules_erlang//:debug_build\": [\"+debug_info\"],\n        \"//conditions:default\": [\"+deterministic\", \"+debug_info\"],\n    }),\n    stamp = 0,\n    testonly = False,\n)\nendef\n\nexport BUILD_FILE_CONTENT\n\nBUILD.bazel:\n\techo \"$$BUILD_FILE_CONTENT\" >> $@\nMK\n                cat bazel-autobuild.mk\n                ${MAKE} -f Makefile -f bazel-autobuild.mk BUILD.bazel\n            else\n                echo \"Skipping erlang.mk import as make is unavailable\"\n            fi\n        fi\n    fi\nfi\n\n# fallback to BUILD file with just the name, version & deps\nif [ ! -f BUILD.bazel ]; then\n    if [ -n \"\" ]; then\n        if [ -n \"[]\" ]; then\n            cat << EOF > BUILD.bazel\nload(\"@rules_erlang//:erlang_app.bzl\", \"erlang_app\")\n\nerlang_app(\n    app_name = \"meck\",\n    app_version = \"\",\n    erlc_opts = select({\n        \"@rules_erlang//:debug_build\": [\"+debug_info\"],\n        \"//conditions:default\": [\"+deterministic\", \"+debug_info\"],\n    }),\n    deps = [],\n    stamp = 0,\n    testonly = False,\n)\nEOF\n        fi\n    fi\nfi\n\n# fallback to BUILD file with just the name and version\nif [ ! -f BUILD.bazel ]; then\n    if [ -n \"\" ]; then\n        cat << EOF > BUILD.bazel\nload(\"@rules_erlang//:erlang_app.bzl\", \"erlang_app\")\n\nerlang_app(\n    app_name = \"meck\",\n    app_version = \"\",\n    erlc_opts = select({\n        \"@rules_erlang//:debug_build\": [\"+debug_info\"],\n        \"//conditions:default\": [\"+deterministic\", \"+debug_info\"],\n    }),\n    stamp = 0,\n    testonly = False,\n)\nEOF\n    fi\nfi\n\n# fallback to BUILD file with just the name\nif [ ! -f BUILD.bazel ]; then\n    cat << EOF > BUILD.bazel\nload(\"@rules_erlang//:erlang_app.bzl\", \"erlang_app\")\n\nerlang_app(\n    app_name = \"meck\",\n    erlc_opts = select({\n        \"@rules_erlang//:debug_build\": [\"+debug_info\"],\n        \"//conditions:default\": [\"+deterministic\", \"+debug_info\"],\n    }),\n    stamp = 0,\n    testonly = False,\n)\nEOF\nfi\n"
              ]
            }
          },
          "proper": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:git.bzl",
            "ruleClassName": "git_repository",
            "attributes": {
              "remote": "https://github.com/manopapad/proper.git",
              "branch": "master",
              "tag": "",
              "commit": "",
              "patch_cmds": [
                "set -euo pipefail\n\necho \"Generating BUILD.bazel for proper...\"\n\n# if there is a Makefile and erlang.mk, use make to infer\n# the version and deps, error on name mismatch, and error\n# if the deps mismatch\nif [ ! -f BUILD.bazel ]; then\n    if [ -f Makefile ]; then\n        if [ -f erlang.mk ]; then\n            if [ -n \"${MAKE:=make}\" ]; then\n                echo \"\tAttempting auto-configure from erlang.mk files...\"\n\n                cat << 'MK' > bazel-autobuild.mk\ncomma:= ,\nproject:= $(lastword $(subst ., ,$(PROJECT)))\nifnappsrc:= $(if $(wildcard src/$(project).app.src),,$1)\n\ndefine BUILD_FILE_CONTENT\nload(\"@rules_erlang//:erlang_app.bzl\", \"erlang_app\")\n\nerlang_app(\n    app_name = \"$(project)\",\n    $(call ifnappsrc,$(if $(PROJECT_DESCRIPTION),app_description = \"\"\"$(PROJECT_DESCRIPTION)\"\"\"$(comma)))\n    $(call ifnappsrc,app_version = \"$(PROJECT_VERSION)\"$(comma))\n    $(call ifnappsrc,app_env = \"\"\"$(PROJECT_ENV)\"\"\"$(comma))\n    $(call ifnappsrc,$(if $(PROJECT_APP_EXTRA_KEYS),app_extra = \"\"\"$(PROJECT_APP_EXTRA_KEYS)\"\"\"$(comma)))\n    $(if $(LOCAL_DEPS),extra_apps = [$(foreach dep,$(LOCAL_DEPS),\n        \"$(dep)\",)\n    ]$(comma))\n    $(if $(BUILD_DEPS),build_deps = [$(foreach dep,$(BUILD_DEPS),\n        \"@$(dep)//:erlang_app\",)\n    ]$(comma))\n    $(if $(DEPS),deps = [$(foreach dep,$(DEPS),\n        \"@$(dep)//:erlang_app\",)\n    ]$(comma))\n    erlc_opts = select({\n        \"@rules_erlang//:debug_build\": [\"+debug_info\"],\n        \"//conditions:default\": [\"+deterministic\", \"+debug_info\"],\n    }),\n    stamp = 0,\n    testonly = False,\n)\nendef\n\nexport BUILD_FILE_CONTENT\n\nBUILD.bazel:\n\techo \"$$BUILD_FILE_CONTENT\" >> $@\nMK\n                cat bazel-autobuild.mk\n                ${MAKE} -f Makefile -f bazel-autobuild.mk BUILD.bazel\n            else\n                echo \"Skipping erlang.mk import as make is unavailable\"\n            fi\n        fi\n    fi\nfi\n\n# fallback to BUILD file with just the name, version & deps\nif [ ! -f BUILD.bazel ]; then\n    if [ -n \"\" ]; then\n        if [ -n \"[]\" ]; then\n            cat << EOF > BUILD.bazel\nload(\"@rules_erlang//:erlang_app.bzl\", \"erlang_app\")\n\nerlang_app(\n    app_name = \"proper\",\n    app_version = \"\",\n    erlc_opts = select({\n        \"@rules_erlang//:debug_build\": [\"+debug_info\"],\n        \"//conditions:default\": [\"+deterministic\", \"+debug_info\"],\n    }),\n    deps = [],\n    stamp = 0,\n    testonly = False,\n)\nEOF\n        fi\n    fi\nfi\n\n# fallback to BUILD file with just the name and version\nif [ ! -f BUILD.bazel ]; then\n    if [ -n \"\" ]; then\n        cat << EOF > BUILD.bazel\nload(\"@rules_erlang//:erlang_app.bzl\", \"erlang_app\")\n\nerlang_app(\n    app_name = \"proper\",\n    app_version = \"\",\n    erlc_opts = select({\n        \"@rules_erlang//:debug_build\": [\"+debug_info\"],\n        \"//conditions:default\": [\"+deterministic\", \"+debug_info\"],\n    }),\n    stamp = 0,\n    testonly = False,\n)\nEOF\n    fi\nfi\n\n# fallback to BUILD file with just the name\nif [ ! -f BUILD.bazel ]; then\n    cat << EOF > BUILD.bazel\nload(\"@rules_erlang//:erlang_app.bzl\", \"erlang_app\")\n\nerlang_app(\n    app_name = \"proper\",\n    erlc_opts = select({\n        \"@rules_erlang//:debug_build\": [\"+debug_info\"],\n        \"//conditions:default\": [\"+deterministic\", \"+debug_info\"],\n    }),\n    stamp = 0,\n    testonly = False,\n)\nEOF\nfi\n"
              ]
            }
          },
          "thoas_rules_erlang": {
            "bzlFile": "@@rules_erlang~//:hex_archive.bzl",
            "ruleClassName": "hex_archive",
            "attributes": {
              "package_name": "thoas",
              "version": "1.0.0",
              "sha256": "fc763185b932ecb32a554fb735ee03c3b6b1b31366077a2427d2a97f3bd26735",
              "build_file": "@@rules_erlang~//:BUILD.thoas",
              "patches": [],
              "patch_args": [
                "-p0"
              ],
              "patch_cmds": []
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "rules_erlang~",
            "bazel_skylib",
            "bazel_skylib~"
          ],
          [
            "rules_erlang~",
            "bazel_tools",
            "bazel_tools"
          ]
        ]
      }
    },
    "@@rules_go~//go:extensions.bzl%go_sdk": {
      "general": {
        "bzlTransitiveDigest": "6OpUR/yglzmu6OR0l9BvoXNEmRETCk2i9/mg6yhIbMA=",
        "usagesDigest": "tTlUxEJJb9GUviwQ6U44JHssQ47EY+5laMrxCO/BfFU=",
        "recordedFileInputs": {},
        "recordedDirentsInputs": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "go_default_sdk": {
            "bzlFile": "@@rules_go~//go/private:sdk.bzl",
            "ruleClassName": "go_download_sdk_rule",
            "attributes": {
              "goos": "",
              "goarch": "",
              "sdks": {},
              "urls": [
                "https://dl.google.com/go/{}"
              ],
              "version": "1.20.2"
            }
          },
          "go_host_compatible_sdk_label": {
            "bzlFile": "@@rules_go~//go/private:extensions.bzl",
            "ruleClassName": "host_compatible_toolchain",
            "attributes": {
              "toolchain": "@go_default_sdk//:ROOT"
            }
          },
          "go_toolchains": {
            "bzlFile": "@@rules_go~//go/private:sdk.bzl",
            "ruleClassName": "go_multiple_toolchains",
            "attributes": {
              "prefixes": [
                "_0000_go_default_sdk_"
              ],
              "geese": [
                ""
              ],
              "goarchs": [
                ""
              ],
              "sdk_repos": [
                "go_default_sdk"
              ],
              "sdk_types": [
                "remote"
              ],
              "sdk_versions": [
                "1.20.2"
              ]
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "rules_go~",
            "bazel_tools",
            "bazel_tools"
          ]
        ]
      }
    }
  }
}
